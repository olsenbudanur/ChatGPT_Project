{"ast":null,"code":"var _jsxFileName = \"/Users/niyama/github/ChatGPT_Project/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n  const [ChatGPTMessage, setChatGPTMessage] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n\n  // async function submit(){\n  //   let res = await fetch('http://localhost:8080/college-essay', {\n  //     method: 'POST', \n  //     body: \"ssa\"\n  //     // JSON.stringify({\n  //     //   // ChatGPTMessage: ChatGPTMessage, \n  //     //   b: \"Data for ChatGPT\"\n  //     // }),\n  //   });\n  //       // .then((response) => response.json())\n  //       // .then((data) => {setValue(data.body)});\n  //   let resJson = await res.json();\n  //   setValue(resJson.body)\n  // }\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  async function submit() {\n    await fetch(\"http://localhost:8080/college-essay\", {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\n        \"a\": \"asfds\",\n        \"b\": \"adfds\"\n      })\n    }).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n  }\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"textarea\",\n      name: \"textValue\",\n      onChange: e => setChatGPTMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      children: \"Send the data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TypeAnimation, {\n      sequence: ['This will be the typing animation of the response, eventually.'],\n      speed: 70,\n      wrapper: \"div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vP15G6rtiS45FQ7nbaZ6co1/rBA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","TypeAnimation","App","ChatGPTMessage","setChatGPTMessage","value","setValue","myHeaders","Headers","append","submit","fetch","method","headers","body","JSON","stringify","then","response","text","result","console","log","catch","error","e","target"],"sources":["/Users/niyama/github/ChatGPT_Project/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\n\nfunction App() {\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n  const [ChatGPTMessage, setChatGPTMessage] = useState<string>(\"\");\n  const [value, setValue] = useState<string>(\"\");\n\n  // async function submit(){\n  //   let res = await fetch('http://localhost:8080/college-essay', {\n  //     method: 'POST', \n  //     body: \"ssa\"\n  //     // JSON.stringify({\n  //     //   // ChatGPTMessage: ChatGPTMessage, \n  //     //   b: \"Data for ChatGPT\"\n  //     // }),\n  //   });\n  //       // .then((response) => response.json())\n  //       // .then((data) => {setValue(data.body)});\n  //   let resJson = await res.json();\n  //   setValue(resJson.body)\n  // }\n\n\n\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n\nasync function submit(){\n  await fetch(\"http://localhost:8080/college-essay\", \n\n    {method: 'POST',\n    headers: myHeaders,\n    body: JSON.stringify({\n      \"a\": \"asfds\",\n      \"b\": \"adfds\"\n    })\n  })\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n}\n\n\n\n\n\n\n  \n\n\n  useEffect(() => {}, []);\n\n  return (\n    \n    <div className=\"App\">\n        <input type=\"textarea\" \n          name=\"textValue\"\n          onChange={(e) => setChatGPTMessage(e.target.value)}\n        />\n        <button onClick={submit} >Send the data</button>\n        <div>{value}</div>\n        <br></br>\n        <TypeAnimation \n          sequence={[\n            'This will be the typing animation of the response, eventually.',\n          ]}\n          speed={70}\n          wrapper=\"div\"\n        />\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGJ,QAAQ,CAAS,EAAE,CAAC;EAChE,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAS,EAAE,CAAC;;EAE9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA,IAAIO,SAAS,GAAG,IAAIC,OAAO,EAAE;EAC7BD,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAItD,eAAeC,MAAM,GAAE;IACrB,MAAMC,KAAK,CAAC,qCAAqC,EAE/C;MAACC,MAAM,EAAE,MAAM;MACfC,OAAO,EAAEN,SAAS;MAClBO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnB,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE;MACP,CAAC;IACH,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC,CACnCG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,KAAK,CAAC,CAAC;EAC9C;EAUEzB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;EAEvB,oBAEE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAChB;MAAO,IAAI,EAAC,UAAU;MACpB,IAAI,EAAC,WAAW;MAChB,QAAQ,EAAG0B,CAAC,IAAKrB,iBAAiB,CAACqB,CAAC,CAACC,MAAM,CAACrB,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACnD,eACF;MAAQ,OAAO,EAAEK,MAAO;MAAA,UAAE;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS,eAChD;MAAA,UAAML;IAAK;MAAA;MAAA;MAAA;IAAA,QAAO,eAClB;MAAA;MAAA;MAAA;IAAA,QAAS,eACT,QAAC,aAAa;MACZ,QAAQ,EAAE,CACR,gEAAgE,CAChE;MACF,KAAK,EAAE,EAAG;MACV,OAAO,EAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV;AAAC,GAzEQH,GAAG;AAAA,KAAHA,GAAG;AA2EZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}