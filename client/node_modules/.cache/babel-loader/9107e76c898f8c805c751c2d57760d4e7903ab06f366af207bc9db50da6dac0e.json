{"ast":null,"code":"var _jsxFileName = \"/Users/niyama/github/ChatGPT_Project/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n\n  function submit() {\n    fetch('http://localhost:8080/college-essay', {\n      method: 'POST',\n      body: JSON.stringify({\n        a: \"Data for ChatGPT\",\n        b: \"Data for ChatGPT\"\n      })\n    }).then(response => response.json()).then(data => {\n      setChatGPTMessage(data.body);\n    });\n  }\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: ChatGPTMessage,\n        placeholder: \"Name\",\n        onChange: e => setChatGPTMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TypeAnimation, {\n      sequence: ['This will be the typing animation of the response, eventually.'],\n      speed: 70,\n      wrapper: \"div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","TypeAnimation","App","submit","fetch","method","body","JSON","stringify","a","b","then","response","json","data","setChatGPTMessage","ChatGPTMessage","e","target","value"],"sources":["/Users/niyama/github/ChatGPT_Project/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\n\nfunction App() {\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n\n  function submit(){\n    fetch('http://localhost:8080/college-essay', {\n      method: 'POST', \n      body: JSON.stringify({\n        a: \"Data for ChatGPT\", \n        b: \"Data for ChatGPT\"})})\n        .then((response) => response.json())\n        .then((data) => {setChatGPTMessage(data.body)});\n  }\n\n\n\n  useEffect(() => {\n    \n  }, []);\n\n  return (\n    \n    <div className=\"App\">\n        {/* <input type=\"textarea\" \n          name=\"textValue\"\n        />\n        <button onClick={submit} >Send the data</button> */}\n\n\n        <form onSubmit={submit}>\n        <input\n          type=\"text\"\n          value={ChatGPTMessage}\n          placeholder=\"Name\"\n          onChange={(e) => setChatGPTMessage(e.target.value)}\n        />\n\n        <button type=\"submit\">Create</button>\n\n      </form>\n  \n        <br></br>\n        <TypeAnimation \n          sequence={[\n            'This will be the typing animation of the response, eventually.',\n          ]}\n          speed={70}\n          wrapper=\"div\"\n        />\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAkB,OAAO;AAClD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;;EAEA,SAASC,MAAM,GAAE;IACfC,KAAK,CAAC,qCAAqC,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,CAAC,EAAE,kBAAkB;QACrBC,CAAC,EAAE;MAAkB,CAAC;IAAC,CAAC,CAAC,CACxBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MAACC,iBAAiB,CAACD,IAAI,CAACR,IAAI,CAAC;IAAA,CAAC,CAAC;EACrD;EAIAN,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAEE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAOhB;MAAM,QAAQ,EAAEG,MAAO;MAAA,wBACvB;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAEa,cAAe;QACtB,WAAW,EAAC,MAAM;QAClB,QAAQ,EAAGC,CAAC,IAAKF,iBAAiB,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QACnD,eAEF;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAEhC,eAEL;MAAA;MAAA;MAAA;IAAA,QAAS,eACT,QAAC,aAAa;MACZ,QAAQ,EAAE,CACR,gEAAgE,CAChE;MACF,KAAK,EAAE,EAAG;MACV,OAAO,EAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV;AAAC,GAnDQjB,GAAG;AAAA,KAAHA,GAAG;AAqDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}