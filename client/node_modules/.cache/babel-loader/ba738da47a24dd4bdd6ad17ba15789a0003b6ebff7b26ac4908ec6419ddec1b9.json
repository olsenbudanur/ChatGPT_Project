{"ast":null,"code":"var _jsxFileName = \"/Users/niyama/github/ChatGPT_Project/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n  const [ChatGPTMessage, setChatGPTMessage] = useState(\"\");\n  const [APIResponse, setAPIResponse] = useState(\"\");\n  function submit() {\n    fetch('http://localhost:8080/college-essay', {\n      method: 'POST',\n      body: JSON.stringify({\n        a: \"Data for ChatGPT\",\n        b: \"Data for ChatGPT\"\n      })\n    }).then(response => response.json()).then(data => {\n      setChatGPTMessage(data.body);\n    });\n  }\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: ChatGPTMessage,\n        onChange: e => setChatGPTMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: APIResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TypeAnimation, {\n      sequence: ['This will be the typing animation of the response, eventually.'],\n      speed: 70,\n      wrapper: \"div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SMaxSy1otwCma9nbIalmm/lOzvQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","TypeAnimation","App","ChatGPTMessage","setChatGPTMessage","APIResponse","setAPIResponse","submit","fetch","method","body","JSON","stringify","a","b","then","response","json","data","e","target","value"],"sources":["/Users/niyama/github/ChatGPT_Project/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TypeAnimation } from 'react-type-animation';\nimport './App.css';\n\nfunction App() {\n  // const [ChatGPTMessage, setChatGPTMessage] = useState<string>('Waiting on value');\n  const [ChatGPTMessage, setChatGPTMessage] = useState(\"\");\n  const [APIResponse, setAPIResponse] = useState(\"\");\n\n  function submit(){\n    fetch('http://localhost:8080/college-essay', {\n      method: 'POST', \n      body: JSON.stringify({\n        a: \"Data for ChatGPT\", \n        b: \"Data for ChatGPT\"})})\n        .then((response) => response.json())\n        .then((data) => {setChatGPTMessage(data.body)});\n  }\n\n  useEffect(() => {\n    \n  }, []);\n\n  return (\n    \n    <div className=\"App\">\n        {/* <input type=\"textarea\" \n          name=\"textValue\"\n        />\n        <button onClick={submit} >Send the data</button> */}\n\n\n        <form onSubmit={submit}>\n        <input\n          type=\"text\"\n          value={ChatGPTMessage}\n          onChange={(e) => setChatGPTMessage(e.target.value)}\n        />\n\n        <button onClick={submit}>Submit</button>\n\n      </form>\n      <div>{APIResponse}</div>\n        <TypeAnimation \n          sequence={[\n            'This will be the typing animation of the response, eventually.',\n          ]}\n          speed={70}\n          wrapper=\"div\"\n        />\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAElD,SAASO,MAAM,GAAE;IACfC,KAAK,CAAC,qCAAqC,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,CAAC,EAAE,kBAAkB;QACrBC,CAAC,EAAE;MAAkB,CAAC;IAAC,CAAC,CAAC,CACxBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MAACd,iBAAiB,CAACc,IAAI,CAACR,IAAI,CAAC;IAAA,CAAC,CAAC;EACrD;EAEAX,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAEE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAOhB;MAAM,QAAQ,EAAEQ,MAAO;MAAA,wBACvB;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAEJ,cAAe;QACtB,QAAQ,EAAGgB,CAAC,IAAKf,iBAAiB,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QACnD,eAEF;QAAQ,OAAO,EAAEd,MAAO;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAEnC,eACP;MAAA,UAAMF;IAAW;MAAA;MAAA;MAAA;IAAA,QAAO,eACtB,QAAC,aAAa;MACZ,QAAQ,EAAE,CACR,gEAAgE,CAChE;MACF,KAAK,EAAE,EAAG;MACV,OAAO,EAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QAEA;AAEV;AAAC,GAjDQH,GAAG;AAAA,KAAHA,GAAG;AAmDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}